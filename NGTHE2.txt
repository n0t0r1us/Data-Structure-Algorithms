#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;

struct Fenwick {
    int n;
    vector<ll> bit;
    Fenwick(int n_=0) { init(n_); }
    void init(int n_) {
        n = n_;
        bit.assign(n+1, 0);
    }
    void add(int x, ll v) {
        for (; x <= n; x += x & -x) bit[x] += v;
    }
    ll sum(int x) {
        ll r = 0;
        for (; x > 0; x -= x & -x) r += bit[x];
        return r;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n;
    if (!(cin >> n)) return 0;
    vector<long long> a(n);
    for (int i = 0; i < n; ++i) cin >> a[i];

    // coordinate compression
    vector<long long> vals = a;
    sort(vals.begin(), vals.end());
    vals.erase(unique(vals.begin(), vals.end()), vals.end());
    int m = (int)vals.size();

    // map value -> position 1..m via binary search
    vector<int> pos(n);
    for (int i = 0; i < n; ++i) {
        pos[i] = (int)(lower_bound(vals.begin(), vals.end(), a[i]) - vals.begin()) + 1;
    }

    Fenwick fw(m + 2);
    ll inv = 0;
    ll seen = 0;
    for (int i = 0; i < n; ++i) {
        int p = pos[i];
        ll le = fw.sum(p);         // number of seen elements <= a[i]
        inv += (seen - le);        // those seen greater than a[i]
        fw.add(p, 1);
        ++seen;
    }

    cout << inv << "\n";
    return 0;
}
