#include <bits/stdc++.h>
using namespace std;
const long long MOD = 1000000007LL;

long long fact[1005], invfact[1005];
int N, K;

long long modpow(long long a, long long e) {
    long long r = 1 % MOD;
    while (e) {
        if (e & 1) r = (r * a) % MOD;
        a = (a * a) % MOD;
        e >>= 1;
    }
    return r;
}

long long nCr(int n, int r) {
    if (r < 0 || r > n) return 0;
    return (((fact[n] * invfact[r]) % MOD) * invfact[n - r]) % MOD;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> N >> K;
    vector<long long> x(N), y(N);
    for (int i = 0; i < N; ++i) cin >> x[i] >> y[i];

    long long minx = x[0], maxx = x[0], miny = y[0], maxy = y[0];
    for (int i = 1; i < N; ++i) {
        if (x[i] < minx) minx = x[i];
        if (x[i] > maxx) maxx = x[i];
        if (y[i] < miny) miny = y[i];
        if (y[i] > maxy) maxy = y[i];
    }
    long long width = maxx - minx;
    long long height = maxy - miny;
    long long X = width * height;
    if (X == 0) {
        cout << 0 << "\n";
        return 0;
    }

    vector<int> L, R, B, T;
    for (int i = 0; i < N; ++i) {
        if (x[i] == minx) L.push_back(i);
        if (x[i] == maxx) R.push_back(i);
        if (y[i] == miny) B.push_back(i);
        if (y[i] == maxy) T.push_back(i);
    }

    // factorials
    fact[0] = 1;
    for (int i = 1; i <= N; ++i) fact[i] = (fact[i - 1] * i) % MOD;
    invfact[N] = modpow(fact[N], MOD - 2);
    for (int i = N; i > 0; --i) invfact[i - 1] = (invfact[i] * i) % MOD;

    vector< vector<int> > sets;
    sets.push_back(L);
    sets.push_back(R);
    sets.push_back(B);
    sets.push_back(T);

    long long ans = 0;
    for (int mask = 1; mask < (1 << 4); ++mask) {
        vector<char> used(N, 0);
        int need = 0;
        for (int b = 0; b < 4; ++b) if (mask & (1 << b)) {
            for (size_t idx_i = 0; idx_i < sets[b].size(); ++idx_i) {
                int idx = sets[b][idx_i];
                if (!used[idx]) { used[idx] = 1; ++need; }
            }
        }
        if (need > K) continue;
        long long ways = nCr(N - need, K - need);
        int bits = __builtin_popcount(mask);
        if (bits % 2 == 1) {
            ans += ways;
            if (ans >= MOD) ans -= MOD;
        } else {
            ans -= ways;
            if (ans < 0) ans += MOD;
        }
    }
    cout << ans % MOD << "\n";
    return 0;
}
