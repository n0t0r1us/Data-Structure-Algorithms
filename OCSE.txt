#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

int n, m, startY, startX;
int garden[105][105];
bool visited[105][105];
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};

int bfs(int y, int x) {
    queue<pair<int, int> > q;
    q.push(make_pair(y, x));
    visited[y][x] = true;
    int count = 1;

    while (!q.empty()) {
        int uy = q.front().first;
        int ux = q.front().second;
        q.pop();

        for (int i = 0; i < 4; ++i) {
            int ny = uy + dy[i];
            int nx = ux + dx[i];

            if (ny >= 1 && ny <= n && nx >= 1 && nx <= m) {
                if (!visited[ny][nx] && garden[ny][nx] == 0) {
                    visited[ny][nx] = true;
                    q.push(make_pair(ny, nx));
                    count++;
                }
            }
        }
    }

    return count;
}

int main() {
    cin >> n >> m >> startY >> startX;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            cin >> garden[i][j];
        }
    }

    memset(visited, false, sizeof(visited));

    cout << bfs(startY, startX) << endl;
    return 0;
}
