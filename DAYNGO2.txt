#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int INF = 1e9;

struct SegTree {
    int n;
    vector<int> st;
    SegTree(int n) : n(n), st(4*n) {}
    void build(vector<int> &a, int id, int l, int r) {
        if(l == r) { st[id] = a[l]; return; }
        int m = (l + r) >> 1;
        build(a, id<<1, l, m);
        build(a, id<<1|1, m+1, r);
        st[id] = min(st[id<<1], st[id<<1|1]);
    }
    int getMin(int id, int l, int r, int u, int v) {
        if(v < l || r < u) return INF;
        if(u <= l && r <= v) return st[id];
        int m = (l + r) >> 1;
        return min(getMin(id<<1, l, m, u, v), getMin(id<<1|1, m+1, r, u, v));
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m;
    cin >> n >> m;
    string s;
    cin >> s;

    vector<int> prefix(n+1, 0);
    for(int i = 1; i <= n; i++) {
        prefix[i] = prefix[i-1] + (s[i-1] == '(' ? 1 : -1);
    }

    SegTree seg(n);
    seg.build(prefix, 1, 0, n);

    while(m--) {
        int l, r;
        cin >> l >> r;
        int sum = prefix[r] - prefix[l-1];
        int minPref = seg.getMin(1, 0, n, l, r);
        if(sum == 0 && minPref >= prefix[l-1]) {
            cout << "YES\n";
        } else {
            cout << "NO\n";
        }
    }

    return 0;
}
