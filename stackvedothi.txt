#include <iostream>
#include <stack>
#include <sstream>
#include <string>
#include <cmath>
#include <iomanip>
using namespace std;

// Hàm chuyển biểu thức hậu tố dạng chuỗi thành giá trị với biến x
double tinhGiaTriHauTo(string expr, double x) {
    stringstream ss(expr);
    stack<double> st;
    string token;

    while (ss >> token) {
        if (token == "x") {
            st.push(x);
        }
        else if (token == "+" || token == "-" || token == "*" || token == "/" || token == "^") {
            double b = st.top(); st.pop();
            double a = st.top(); st.pop();
            if (token == "+") st.push(a + b);
            else if (token == "-") st.push(a - b);
            else if (token == "*") st.push(a * b);
            else if (token == "/") st.push(a / b);
            else if (token == "^") st.push(pow(a, b));
        }
        else {
            st.push(stod(token)); // Số thực hoặc nguyên
        }
    }

    return st.top();
}

int main() {
    string expr;
    getline(cin, expr); // Nhập biểu thức hậu tố, ví dụ: x x * 3 +

    const int width = 41, height = 21;
    char canvas[height][width];

    // Khởi tạo toàn bộ canvas là khoảng trắng
    for (int i = 0; i < height; ++i)
        for (int j = 0; j < width; ++j)
            canvas[i][j] = ' ';

    // Vẽ trục X (nằm ngang ở dòng giữa)
    for (int j = 0; j < width; ++j)
        canvas[height / 2][j] = '-';

    // Vẽ trục Y (cột giữa)
    for (int i = 0; i < height; ++i)
        canvas[i][width / 2] = '|';

    // Gốc tọa độ
    canvas[height / 2][width / 2] = '+';

    // Tính các điểm của đồ thị
    for (int xi = -20; xi <= 20; ++xi) {
        double yi = tinhGiaTriHauTo(expr, xi);
        int x = xi + width / 2;
        int y = height / 2 - (int)round(yi);

        if (x >= 0 && x < width && y >= 0 && y < height) {
            canvas[y][x] = '*';
        }
    }

    // In kết quả
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j)
            cout << canvas[i][j];
        cout << '\n';
    }

    return 0;
}
