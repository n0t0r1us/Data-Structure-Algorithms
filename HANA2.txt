#include <iostream>
#include <cstring>
using namespace std;

const int MAX = 201;
const int MOD = 10000000;

int grid[MAX][MAX];
int dp[MAX][MAX][8]; // dp[i][j][mask]

int n, m;

// Đếm số bit bật trong mask
int popcount(int x) {
    int cnt = 0;
    while (x) {
        cnt += x & 1;
        x >>= 1;
    }
    return cnt;
}

int main() {
    cin >> n >> m;

    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j)
            cin >> grid[i][j];

    memset(dp, 0, sizeof(dp));
    dp[1][1][0] = 1; // Xuất phát tại (1,1), chưa hái gì

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (grid[i][j] == -1) continue; // Nấm độc, bỏ qua

            for (int mask = 0; mask < 8; ++mask) {
                int val = dp[i][j][mask];
                if (val == 0) continue;

                // Di chuyển xuống
                if (i + 1 <= n && grid[i + 1][j] != -1) {
                    int new_mask = mask;
                    if (grid[i + 1][j] >= 1 && grid[i + 1][j] <= 3)
                        new_mask |= 1 << (grid[i + 1][j] - 1);

                    dp[i + 1][j][new_mask] = (dp[i + 1][j][new_mask] + val) % MOD;
                }

                // Di chuyển sang phải
                if (j + 1 <= m && grid[i][j + 1] != -1) {
                    int new_mask = mask;
                    if (grid[i][j + 1] >= 1 && grid[i][j + 1] <= 3)
                        new_mask |= 1 << (grid[i][j + 1] - 1);

                    dp[i][j + 1][new_mask] = (dp[i][j + 1][new_mask] + val) % MOD;
                }
            }
        }
    }

    int result = 0;
    for (int mask = 0; mask < 8; ++mask) {
        if (popcount(mask) >= 2)
            result = (result + dp[n][m][mask]) % MOD;
    }

    cout << result << endl;
    return 0;
}
