#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
};

// Tạo node mới
Node* createNode(int x) {
    Node* node = new Node;
    node->data = x;
    node->left = node->right = NULL;
    return node;
}

// Chèn phần tử vào cây BST
Node* insert(Node* root, int x) {
    if (root == NULL) return createNode(x);
    if (x < root->data)
        root->left = insert(root->left, x);
    else if (x > root->data)
        root->right = insert(root->right, x);
    return root;
}

// Duyệt giữa (in-order): LNR
void inorder(Node* root) {
    if (root == NULL) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

// Tìm phần tử trong cây
bool search(Node* root, int x) {
    if (root == NULL) return false;
    if (root->data == x) return true;
    if (x < root->data)
        return search(root->left, x);
    else
        return search(root->right, x);
}

// Tìm node nhỏ nhất
Node* findMin(Node* root) {
    while (root && root->left != NULL)
        root = root->left;
    return root;
}

// Xóa phần tử x khỏi cây
Node* remove(Node* root, int x) {
    if (root == NULL) return NULL;

    if (x < root->data)
        root->left = remove(root->left, x);
    else if (x > root->data)
        root->right = remove(root->right, x);
    else {
        // Node có 0 hoặc 1 con
        if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        // Node có 2 con: tìm phần tử nhỏ nhất bên phải
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = remove(root->right, temp->data);
    }
    return root;
}

int main() {
    Node* root = NULL;
    int n, x;

    // Nhập số lượng phần tử
    cin >> n;
    for (int i = 0; i < n; ++i) {
        int val;
        cin >> val;
        root = insert(root, val);
    }

    // In cây theo thứ tự giữa (tăng dần)
    inorder(root);
    cout << endl;

    // Kiểm tra sự tồn tại của x
    cin >> x;
    if (search(root, x))
        cout << "YES\n";
    else
        cout << "NO\n";

    // Xóa x và in lại cây
    root = remove(root, x);
    inorder(root);
    cout << endl;

    return 0;
}
