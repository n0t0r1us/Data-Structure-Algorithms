#include <bits/stdc++.h>
using namespace std;
struct BIT {
    vector<long long> bit;
    int n;
    BIT(int n): n(n), bit(n+1, 0) {}
    void update(int idx, long long val) {
        for (; idx <= n; idx += idx & -idx) bit[idx] += val;
    }
    long long query(int idx) {
        long long res = 0;
        for (; idx > 0; idx -= idx & -idx) res += bit[idx];
        return res;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<long long> pref(n+1, 0);
    for (int i = 1; i <= n; i++) {
        pref[i] = pref[i-1] + (s[i-1] == '(' ? 1 : -1);
    }
    // Nén giá trị
    vector<long long> vals(pref.begin(), pref.end());
    sort(vals.begin(), vals.end());
    vals.erase(unique(vals.begin(), vals.end()), vals.end());
    int m = vals.size();
    BIT bitCount(m), bitSum(m);

    long long ans = 0;
    // update pref[0]
    int idx0 = lower_bound(vals.begin(), vals.end(), pref[0]) - vals.begin() + 1;
    bitCount.update(idx0, 1);
    bitSum.update(idx0, pref[0]);

    for (int r = 1; r <= n; r++) {
        int idx = lower_bound(vals.begin(), vals.end(), pref[r]) - vals.begin() + 1;
        int idxLess = idx - 1; // các giá trị nhỏ hơn pref[r]
        if (idxLess > 0) {
            long long cnt = bitCount.query(idxLess);
            long long sumPref = bitSum.query(idxLess);
            ans += cnt * pref[r] - sumPref;
        }
        bitCount.update(idx, 1);
        bitSum.update(idx, pref[r]);
    }
    cout << ans << "\n";
    return 0;
}
