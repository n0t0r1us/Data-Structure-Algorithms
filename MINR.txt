#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
typedef long long ll;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n, m;
    if (!(cin >> n >> m)) return 0;
    vector<ll> a(n);
    for (int i = 0; i < n; ++i) cin >> a[i];

    // precompute logs
    vector<int> lg(n + 1);
    lg[1] = 0;
    for (int i = 2; i <= n; ++i) lg[i] = lg[i/2] + 1;

    int K = lg[n]; // max power
    vector< vector<ll> > st(K + 1, vector<ll>(n));
    // k = 0
    for (int i = 0; i < n; ++i) st[0][i] = a[i];
    for (int k = 1; k <= K; ++k) {
        int len = 1 << k;
        int half = 1 << (k - 1);
        for (int i = 0; i + len - 1 < n; ++i) {
            st[k][i] = min(st[k-1][i], st[k-1][i + half]);
        }
    }

    for (int qi = 0; qi < m; ++qi) {
        int L, R;
        cin >> L >> R;
        // convert to 0-based
        int l = L - 1, r = R - 1;
        int len = r - l + 1;
        int k = lg[len];
        ll ans = min(st[k][l], st[k][r - (1<<k) + 1]);
        cout << ans << '\n';
    }

    return 0;
}
