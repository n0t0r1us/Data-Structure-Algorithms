#include <bits/stdc++.h>
using namespace std;

struct BIT {
    vector<long long> bit;
    int n;
    BIT(int n): n(n), bit(n+1, 0) {}
    void update(int idx, long long val) {
        for (; idx <= n; idx += idx & -idx) bit[idx] += val;
    }
    long long query(int idx) {
        long long res = 0;
        for (; idx > 0; idx -= idx & -idx) res += bit[idx];
        return res;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    vector<long long> a(n);
    for (int i = 0; i < n; i++) cin >> a[i];
    // Nén giá trị
    vector<long long> vals = a;
    sort(vals.begin(), vals.end());
    vals.erase(unique(vals.begin(), vals.end()), vals.end());
    int m = vals.size();
    BIT bitCount(m), bitSum(m);
    const long long MOD = 1000000000LL;
    long long ans = 0;
    long long totalCount = 0, totalSum = 0;

    for (int i = 0; i < n; i++) {
        int idx = lower_bound(vals.begin(), vals.end(), a[i]) - vals.begin() + 1;
        long long cntLessEq = bitCount.query(idx);
        long long sumLessEq = bitSum.query(idx);
        long long cntGreater = totalCount - cntLessEq;
        long long sumGreater = totalSum - sumLessEq;
        ans = (ans + (sumGreater - cntGreater * a[i]) % MOD + MOD) % MOD;
        // update
        bitCount.update(idx, 1);
        bitSum.update(idx, a[i]);
        totalCount++;
        totalSum += a[i];
    }
    cout << ans % MOD << "\n";
    return 0;
}
