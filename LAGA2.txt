#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;

const int MAX = 260;
int board[MAX][MAX];
int tileID = 1;
vector< vector<int> > result;

// Hàm đặt viên gạch chữ L vào 3 ô
void place(int y1, int x1, int y2, int x2, int y3, int x3) {
    result.push_back(vector<int>());
    result.back().push_back(y1);
    result.back().push_back(x1);
    result.back().push_back(y2);
    result.back().push_back(x2);
    result.back().push_back(y3);
    result.back().push_back(x3);
}

// Đệ quy lát gạch
void tile(int size, int top, int left, int holeY, int holeX) {
    if (size == 2) {
        int id = tileID++;
        for (int dy = 0; dy < 2; dy++) {
            for (int dx = 0; dx < 2; dx++) {
                int y = top + dy;
                int x = left + dx;
                if (y != holeY || x != holeX) {
                    board[y][x] = id;
                }
            }
        }

        // Ghi lại 3 ô của viên gạch
        int cnt = 0;
        int y1, x1, y2, x2, y3, x3;
        for (int dy = 0; dy < 2; dy++) {
            for (int dx = 0; dx < 2; dx++) {
                int y = top + dy;
                int x = left + dx;
                if (y != holeY || x != holeX) {
                    if (cnt == 0) { y1 = y; x1 = x; }
                    else if (cnt == 1) { y2 = y; x2 = x; }
                    else { y3 = y; x3 = x; }
                    cnt++;
                }
            }
        }
        place(y1, x1, y2, x2, y3, x3);
        return;
    }

    int mid = size / 2;
    int mx = left + mid;
    int my = top + mid;

    // Xác định góc chứa lỗ
    int quad = 0;
    if (holeY < my && holeX < mx) quad = 0;
    else if (holeY < my && holeX >= mx) quad = 1;
    else if (holeY >= my && holeX < mx) quad = 2;
    else quad = 3;

    // Tọa độ của 4 ô trung tâm
    int cy[4] = {my - 1, my - 1, my, my};
    int cx[4] = {mx - 1, mx, mx - 1, mx};

    // Đặt viên gạch ở giữa để tạo lỗ giả
    int tid = tileID++;
    for (int i = 0; i < 4; i++) {
        if (i == quad) continue;
        board[cy[i]][cx[i]] = tid;
    }
    place(cy[(quad+1)%4], cx[(quad+1)%4], cy[(quad+2)%4], cx[(quad+2)%4], cy[(quad+3)%4], cx[(quad+3)%4]);

    // Gọi đệ quy cho 4 phần
    tile(mid, top, left, quad==0 ? holeY : my-1, quad==0 ? holeX : mx-1);
    tile(mid, top, mx, quad==1 ? holeY : my-1, quad==1 ? holeX : mx);
    tile(mid, my, left, quad==2 ? holeY : my, quad==2 ? holeX : mx-1);
    tile(mid, my, mx, quad==3 ? holeY : my, quad==3 ? holeX : mx);
}

int main() {
    int n, y, x;
    cin >> n >> y >> x;

    // Đổi từ 1-based sang 0-based
    y--; x--;

    if (n & (n - 1)) {
        cout << -1 << endl;
        return 0;
    }

    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            board[i][j] = 0;

    board[y][x] = -1; // Ô có hồ

    tile(n, 0, 0, y, x);

    int A = result.size();
    cout << A << endl;
    for (int i = 0; i < A; ++i) {
        for (int j = 0; j < 6; ++j) {
            cout << result[i][j]+1; // in lại dạng 1-based
            if (j < 5) cout << " ";
        }
        cout << endl;
    }
    return 0;
}
