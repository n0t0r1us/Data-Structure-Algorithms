#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int value;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

Node* buildFullBST(int start, int end) {
    if (start > end) {
        return NULL;
    }
    int mid = (start + end) / 2;
    Node* root = createNode(mid);
    root->left = buildFullBST(start, mid - 1);
    root->right = buildFullBST(mid + 1, end);
    return root;
}

void postorderTraversal(Node* root, int* result, int* index) {
    if (root != NULL) {
        postorderTraversal(root->left, result, index);
        postorderTraversal(root->right, result, index);
        result[(*index)++] = root->value;
    }
}

void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    int h;
    scanf("%d", &h);
    int n = (1 << h) - 1;
    Node* root = buildFullBST(1, n);
    
    int* result = (int*)malloc(n * sizeof(int));
    int index = 0;
    postorderTraversal(root, result, &index);
    
    for (int i = 0; i < n; i++) {
        printf("%d ", result[i]);
    }
    freeTree(root);
    free(result);
    return 0;
}
    
