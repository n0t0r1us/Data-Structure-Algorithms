#include <iostream>
#include <stack>
#include <string>
#include <cctype> // isalpha

using namespace std;

// Hàm trả về độ ưu tiên của toán tử
int pre(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

// Hàm kiểm tra toán tử có phải là phải kết hợp phải (right-associative)
bool phai(char op) {
    return op == '^';
}

int main() {
    string expr;
    cin >> expr; // Đọc biểu thức trung tố (không chứa khoảng trắng)

    stack<char> st;
    string output = "";

    for (int i = 0; i < expr.length(); i++) {
        char ch = expr[i];

        if (isalpha(ch)) {
            output += ch;
            output += ' ';
        }
        else if (ch == '(') {
            st.push(ch);
        }
        else if (ch == ')') {
            while (!st.empty() && st.top() != '(') {
                output += st.top();
                output += ' ';
                st.pop();
            }
            if (!st.empty()) st.pop(); // pop '('
        }
        else {
            while (!st.empty() && st.top() != '(') {
                char top = st.top();
                if ((pre(top) > pre(ch)) || (pre(top) == pre(ch) && !phai(ch))) {
                    output += top;
                    output += ' ';
                    st.pop();
                }
                else break;
            }
            st.push(ch);
        }
    }

    // Lấy hết các toán tử còn lại trong stack
    while (!st.empty()) {
        output += st.top();
        output += ' ';
        st.pop();
    }

    // Xóa dấu cách cuối nếu có
    if (!output.empty() && output[output.length() - 1] == ' ')
        output.erase(output.length() - 1);

    cout << output << endl;

    return 0;
}
