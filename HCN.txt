#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
typedef long long ll;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    if (!(cin >> n)) return 0;
    vector<int> a(n+1), b(n+1);
    for (int i = 1; i <= n; ++i) cin >> a[i] >> b[i];

    // dp[i][0] -> place i with width = a[i], height = b[i]
    // dp[i][1] -> place i with width = b[i], height = a[i]
    vector< vector<ll> > dp(n+1, vector<ll>(2, (ll)-9e18));

    dp[1][0] = a[1];
    dp[1][1] = b[1];

    for (int i = 2; i <= n; ++i) {
        // option o = 0: w = a[i], h = b[i]
        ll best0 = (ll)-9e18;
        // previous p = 0: prev h = b[i-1], prev dp = dp[i-1][0]
        best0 = max(best0, dp[i-1][0] + ll( abs(b[i-1] - b[i]) ) );
        // previous p = 1: prev h = a[i-1]
        best0 = max(best0, dp[i-1][1] + ll( abs(a[i-1] - b[i]) ) );
        dp[i][0] = best0 + a[i];

        // option o = 1: w = b[i], h = a[i]
        ll best1 = (ll)-9e18;
        best1 = max(best1, dp[i-1][0] + ll( abs(b[i-1] - a[i]) ) );
        best1 = max(best1, dp[i-1][1] + ll( abs(a[i-1] - a[i]) ) );
        dp[i][1] = best1 + b[i];
    }

    ll ans = max(dp[n][0], dp[n][1]);
    cout << ans << "\n";
    return 0;
}
