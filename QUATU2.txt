#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

const int N = 9;
int visited[N][N];
int dy[4] = {-2, -2, 2, 2};
int dx[4] = {-2, 2, -2, 2};

bool inside(int y, int x) {
    return y >= 1 && y <= 8 && x >= 1 && x <= 8;
}

int bfs(int sy, int sx, int ty, int tx) {
    memset(visited, -1, sizeof(visited));
    queue<pair<int, int> > q;
    q.push(make_pair(sy, sx));
    visited[sy][sx] = 0;

    while (!q.empty()) {
        int y = q.front().first;
        int x = q.front().second;
        q.pop();

        if (y == ty && x == tx) return visited[y][x];

        for (int i = 0; i < 4; i++) {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if (inside(ny, nx) && visited[ny][nx] == -1) {
                visited[ny][nx] = visited[y][x] + 1;
                q.push(make_pair(ny, nx));
            }
        }
    }

    return -1;
}

int main() {
    int y, x, ty, tx;
    cin >> y >> x >> ty >> tx;
    cout << bfs(y, x, ty, tx) << endl;
    return 0;
}
