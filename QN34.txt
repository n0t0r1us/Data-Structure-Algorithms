#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

const int MAX = 1005;
int n, m, t;
int height[MAX][MAX];
bool visited[MAX][MAX];
int parent[MAX * MAX];
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

int getId(int x, int y) {
    return x * m + y;
}

int find(int x) {
    if (parent[x] != x)
        parent[x] = find(parent[x]);
    return parent[x];
}

void unite(int x, int y) {
    int px = find(x);
    int py = find(y);
    if (px != py)
        parent[px] = py;
}

struct Cell {
    int x, y, h;
};

bool cmp(Cell a, Cell b) {
    return a.h > b.h;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> m;
    vector<Cell> cells;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j) {
            cin >> height[i][j];
            cells.push_back((Cell){i, j, height[i][j]});
            visited[i][j] = false;
        }

    sort(cells.begin(), cells.end(), cmp);

    cin >> t;
    vector<int> water(t);
    for (int i = 0; i < t; ++i)
        cin >> water[i];

    vector<int> res(t);
    int islands = 0, pos = 0;
    for (int i = 0; i < n * m; ++i)
        parent[i] = i;

    for (int i = t - 1; i >= 0; --i) {
        while (pos < cells.size() && cells[pos].h > water[i]) {
            int x = cells[pos].x;
            int y = cells[pos].y;
            visited[x][y] = true;
            int id = getId(x, y);
            ++islands;
            for (int d = 0; d < 4; ++d) {
                int nx = x + dx[d];
                int ny = y + dy[d];
                if (nx >= 0 && nx < n && ny >= 0 && ny < m && visited[nx][ny]) {
                    int nid = getId(nx, ny);
                    if (find(id) != find(nid)) {
                        unite(id, nid);
                        --islands;
                    }
                }
            }
            ++pos;
        }
        res[i] = islands;
    }

    for (int i = 0; i < t; ++i)
        cout << res[i] << ' ';
    return 0;
}
